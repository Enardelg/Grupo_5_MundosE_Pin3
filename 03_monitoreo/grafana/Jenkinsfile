pipeline {
    agent any
    
    stages {
        stage('Create Grafana Namespace') {
            steps {
                sshagent(['ssh-key']) {
                    sh 'ssh -o StrictHostKeyChecking=no ${SERVER} ${kubectlPath} create namespace grafana'
                }
            }
        }
        stage('Add Helm Repository for Grafana') {
            steps {
                sshagent(['ssh-key']) {
                    sh 'ssh -o StrictHostKeyChecking=no ${SERVER} helm repo add grafana https://grafana.github.io/helm-charts'
                }
            }
        }
        stage('Update Helm Repositories') {
            steps {
                sshagent(['ssh-key']) {
                    sh 'ssh -o StrictHostKeyChecking=no ${SERVER} helm repo update'
                }
            }
        }
        
        stage('Create grafana.yml on EC2') {
            steps {
                sshagent(['ssh-key']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ${SERVER} "mkdir -p /home/ubuntu/grafana/pipeline && echo '\
                        datasources:
                        datasources.yaml:
                          apiVersion: 1
                          datasources:
                          - name: Prometheus
                            type: prometheus
                            url: http://prometheus-server.prometheus.svc.cluster.local
                            access: proxy
                            isDefault: true
                        ' > /home/ubuntu/grafana/pipeline/grafana.yml"
                    '''
                }
            }
        }
        
        stage('Install Grafana with Persistent Volumes') {
            steps {
                sshagent(['ssh-key']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ${SERVER} helm install grafana grafana/grafana \
                          --namespace grafana \
                          --set persistence.storageClassName="gp2" \
                          --set persistence.enabled=true \
                          --set adminPassword=cuturul \
                          --values /home/ubuntu/grafana/pipeline/grafana.yml \
                          --set service.type=LoadBalancer \
                          --force
                    '''
                }
            }
        }
        stage('Check Grafana Deployment Status') {
            steps {
                sshagent(['ssh-key']) {
                    sh 'ssh -o StrictHostKeyChecking=no ${SERVER} ${kubectlPath} get all -n grafana'
                }
            }
        }
        stage('Get Grafana Load Balancer URL') {
            steps {
                sshagent(['ssh-key']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ${SERVER} export ELB=$(${kubectlPath} get svc -n grafana grafana -o jsonpath=\'{.status.loadBalancer.ingress[0].hostname}\')
                        ssh -o StrictHostKeyChecking=no ${SERVER} echo "http://$ELB"
                    '''
                }
            }
        }
        stage('Get Grafana Admin Password') {
            steps {
                sshagent(['ssh-key']) {
                    sh 'ssh -o StrictHostKeyChecking=no ${SERVER} ${kubectlPath} get secret --namespace grafana grafana -o jsonpath="{.data.admin-password}" | base64 --decode; echo'
                }
            }
        }
        stage('Get Grafana Service Details') {
            steps {
                sshagent(['ssh-key']) {
                    sh 'ssh -o StrictHostKeyChecking=no ${SERVER} ${kubectlPath} get svc -n grafana'
                }
            }
        }
    }
}
